#include <iostream>
#include <vector>
#include <chrono>

using namespace std;
using namespace std::chrono;

// Function to merge two sorted halves
template <typename Iterator>
void merge(Iterator left, Iterator mid, Iterator right) {
    vector<typename Iterator::value_type> temp(distance(left, right));
    Iterator i = left, j = mid, k = temp.begin();
    
    while (i != mid && j != right) {
        if (*i <= *j)
            *k++ = *i++;
        else
            *k++ = *j++;
    }

    while (i != mid) *k++ = *i++;
    while (j != right) *k++ = *j++;

    copy(temp.begin(), temp.end(), left);
}

// Recursive Merge Sort function using iterators
template <typename Iterator>
void mergeSort(Iterator left, Iterator right) {
    if (distance(left, right) > 1) {
        Iterator mid = left + distance(left, right) / 2;
        mergeSort(left, mid);
        mergeSort(mid, right);
        merge(left, mid, right);
    }
}

int main() {
    int size;
    cout << "Enter the number of elements: ";
    cin >> size;

    vector<int> arr(size);
    cout << "Enter " << size << " numbers: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    auto start = high_resolution_clock::now();
    mergeSort(arr.begin(), arr.end());
    auto stop = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(stop - start);

    cout << "Sorted array: ";
    for (const int &num : arr) {
        cout << num << " ";
    }
    cout << "\nTime taken for Merge Sort: " << duration.count() << " microseconds" << endl;

    return 0;
}
